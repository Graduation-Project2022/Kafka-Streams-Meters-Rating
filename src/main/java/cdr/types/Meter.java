/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package cdr.types;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Meter extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9036847685346256758L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Meter\",\"namespace\":\"cdr.types\",\"fields\":[{\"name\":\"meterID\",\"type\":\"int\"},{\"name\":\"meterSerial\",\"type\":\"string\"},{\"name\":\"meterType\",\"type\":\"string\"},{\"name\":\"lastUpdate\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\"}}],\"connect.version\":1,\"connect.name\":\"cdr.types.Meter\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<Meter> ENCODER =
      new BinaryMessageEncoder<Meter>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Meter> DECODER =
      new BinaryMessageDecoder<Meter>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Meter> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Meter> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Meter> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Meter>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Meter to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Meter from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Meter instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Meter fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int meterID;
  private java.lang.CharSequence meterSerial;
  private java.lang.CharSequence meterType;
  private java.time.Instant lastUpdate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Meter() {}

  /**
   * All-args constructor.
   * @param meterID The new value for meterID
   * @param meterSerial The new value for meterSerial
   * @param meterType The new value for meterType
   * @param lastUpdate The new value for lastUpdate
   */
  public Meter(java.lang.Integer meterID, java.lang.CharSequence meterSerial, java.lang.CharSequence meterType, java.time.Instant lastUpdate) {
    this.meterID = meterID;
    this.meterSerial = meterSerial;
    this.meterType = meterType;
    this.lastUpdate = lastUpdate.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return meterID;
    case 1: return meterSerial;
    case 2: return meterType;
    case 3: return lastUpdate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: meterID = (java.lang.Integer)value$; break;
    case 1: meterSerial = (java.lang.CharSequence)value$; break;
    case 2: meterType = (java.lang.CharSequence)value$; break;
    case 3: lastUpdate = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'meterID' field.
   * @return The value of the 'meterID' field.
   */
  public int getMeterID() {
    return meterID;
  }


  /**
   * Sets the value of the 'meterID' field.
   * @param value the value to set.
   */
  public void setMeterID(int value) {
    this.meterID = value;
  }

  /**
   * Gets the value of the 'meterSerial' field.
   * @return The value of the 'meterSerial' field.
   */
  public java.lang.CharSequence getMeterSerial() {
    return meterSerial;
  }


  /**
   * Sets the value of the 'meterSerial' field.
   * @param value the value to set.
   */
  public void setMeterSerial(java.lang.CharSequence value) {
    this.meterSerial = value;
  }

  /**
   * Gets the value of the 'meterType' field.
   * @return The value of the 'meterType' field.
   */
  public java.lang.CharSequence getMeterType() {
    return meterType;
  }


  /**
   * Sets the value of the 'meterType' field.
   * @param value the value to set.
   */
  public void setMeterType(java.lang.CharSequence value) {
    this.meterType = value;
  }

  /**
   * Gets the value of the 'lastUpdate' field.
   * @return The value of the 'lastUpdate' field.
   */
  public java.time.Instant getLastUpdate() {
    return lastUpdate;
  }


  /**
   * Sets the value of the 'lastUpdate' field.
   * @param value the value to set.
   */
  public void setLastUpdate(java.time.Instant value) {
    this.lastUpdate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new Meter RecordBuilder.
   * @return A new Meter RecordBuilder
   */
  public static cdr.types.Meter.Builder newBuilder() {
    return new cdr.types.Meter.Builder();
  }

  /**
   * Creates a new Meter RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Meter RecordBuilder
   */
  public static cdr.types.Meter.Builder newBuilder(cdr.types.Meter.Builder other) {
    if (other == null) {
      return new cdr.types.Meter.Builder();
    } else {
      return new cdr.types.Meter.Builder(other);
    }
  }

  /**
   * Creates a new Meter RecordBuilder by copying an existing Meter instance.
   * @param other The existing instance to copy.
   * @return A new Meter RecordBuilder
   */
  public static cdr.types.Meter.Builder newBuilder(cdr.types.Meter other) {
    if (other == null) {
      return new cdr.types.Meter.Builder();
    } else {
      return new cdr.types.Meter.Builder(other);
    }
  }

  /**
   * RecordBuilder for Meter instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Meter>
    implements org.apache.avro.data.RecordBuilder<Meter> {

    private int meterID;
    private java.lang.CharSequence meterSerial;
    private java.lang.CharSequence meterType;
    private java.time.Instant lastUpdate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(cdr.types.Meter.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.meterID)) {
        this.meterID = data().deepCopy(fields()[0].schema(), other.meterID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.meterSerial)) {
        this.meterSerial = data().deepCopy(fields()[1].schema(), other.meterSerial);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.meterType)) {
        this.meterType = data().deepCopy(fields()[2].schema(), other.meterType);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[3].schema(), other.lastUpdate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Meter instance
     * @param other The existing instance to copy.
     */
    private Builder(cdr.types.Meter other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.meterID)) {
        this.meterID = data().deepCopy(fields()[0].schema(), other.meterID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.meterSerial)) {
        this.meterSerial = data().deepCopy(fields()[1].schema(), other.meterSerial);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.meterType)) {
        this.meterType = data().deepCopy(fields()[2].schema(), other.meterType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[3].schema(), other.lastUpdate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'meterID' field.
      * @return The value.
      */
    public int getMeterID() {
      return meterID;
    }


    /**
      * Sets the value of the 'meterID' field.
      * @param value The value of 'meterID'.
      * @return This builder.
      */
    public cdr.types.Meter.Builder setMeterID(int value) {
      validate(fields()[0], value);
      this.meterID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'meterID' field has been set.
      * @return True if the 'meterID' field has been set, false otherwise.
      */
    public boolean hasMeterID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'meterID' field.
      * @return This builder.
      */
    public cdr.types.Meter.Builder clearMeterID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'meterSerial' field.
      * @return The value.
      */
    public java.lang.CharSequence getMeterSerial() {
      return meterSerial;
    }


    /**
      * Sets the value of the 'meterSerial' field.
      * @param value The value of 'meterSerial'.
      * @return This builder.
      */
    public cdr.types.Meter.Builder setMeterSerial(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.meterSerial = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'meterSerial' field has been set.
      * @return True if the 'meterSerial' field has been set, false otherwise.
      */
    public boolean hasMeterSerial() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'meterSerial' field.
      * @return This builder.
      */
    public cdr.types.Meter.Builder clearMeterSerial() {
      meterSerial = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'meterType' field.
      * @return The value.
      */
    public java.lang.CharSequence getMeterType() {
      return meterType;
    }


    /**
      * Sets the value of the 'meterType' field.
      * @param value The value of 'meterType'.
      * @return This builder.
      */
    public cdr.types.Meter.Builder setMeterType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.meterType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'meterType' field has been set.
      * @return True if the 'meterType' field has been set, false otherwise.
      */
    public boolean hasMeterType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'meterType' field.
      * @return This builder.
      */
    public cdr.types.Meter.Builder clearMeterType() {
      meterType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdate' field.
      * @return The value.
      */
    public java.time.Instant getLastUpdate() {
      return lastUpdate;
    }


    /**
      * Sets the value of the 'lastUpdate' field.
      * @param value The value of 'lastUpdate'.
      * @return This builder.
      */
    public cdr.types.Meter.Builder setLastUpdate(java.time.Instant value) {
      validate(fields()[3], value);
      this.lastUpdate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdate' field has been set.
      * @return True if the 'lastUpdate' field has been set, false otherwise.
      */
    public boolean hasLastUpdate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lastUpdate' field.
      * @return This builder.
      */
    public cdr.types.Meter.Builder clearLastUpdate() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Meter build() {
      try {
        Meter record = new Meter();
        record.meterID = fieldSetFlags()[0] ? this.meterID : (java.lang.Integer) defaultValue(fields()[0]);
        record.meterSerial = fieldSetFlags()[1] ? this.meterSerial : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.meterType = fieldSetFlags()[2] ? this.meterType : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.lastUpdate = fieldSetFlags()[3] ? this.lastUpdate : (java.time.Instant) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Meter>
    WRITER$ = (org.apache.avro.io.DatumWriter<Meter>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Meter>
    READER$ = (org.apache.avro.io.DatumReader<Meter>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










